#version 400 core

const int LIGHTS = 8;

in vec3 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[LIGHTS];
in vec3 toCameraVector;
in vec4 shadowCoords;
in float visibility;

in float verz;
in vec4 LV;//!!!!!!!!
in float bias;
//in float nearEnough;

layout (location = 0) out vec4 out_Color;
layout (location = 1) out vec4 out_BrightColor;

uniform sampler2DShadow shadowMap;
uniform vec3 lightColour[LIGHTS];
uniform vec3 attenuation[LIGHTS];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform float highlight;
uniform sampler2DArray TEX;

uniform float useShadows;
uniform float useLightingCalc;

uniform int MODE;

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);

//const vec2 poissonDisk[4] = vec2[](
//  vec2( -0.094201624, -0.039906216 ),
//  vec2( 0.094558609, -0.076890725 ),
//  vec2( -0.0094184101, -0.092938870 ),
//  vec2( 0.034495938, 0.029387760 )
//);

const int GLASS = 11;

void main(void){
	
	//if(pass_textureCoordinates.z == GLASS){
	//	
	//}
	
	vec4 textureColor = texture(TEX , pass_textureCoordinates);
	
	if(textureColor.a < 0.1){
		discard;
	}
	
	//if(textureColor.a < 1){
	//	gl_FragDepth = 100000;
	//}else{
	//	gl_FragDepth = gl_FragCoord.z;
	//}
	
	float lightFactor = 1.0;
	if(useShadows > 0.5){// && nearEnough > 0.5
		//float mapSize = 4096.0;
		//float mapSize = textureSize(shadowMap, 0.0).x;
		//float texelSize = 1.0 / mapSize;
		//float total = 0.0;
		
		//for(int x = -pcfCount; x <= pcfCount; x++){
		//	for(int y = -pcfCount; y <= pcfCount; y++){
		//		//float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;
		//		//if(shadowCoords.z > objectNearestLight + 0.002){
		//		//	total += 1.0/(x*x+y*y);
		//			//total += 1.0;
		//		//}
		//		total -= clamp(texture(shadowMap, vec3(shadowCoords.xy, shadowCoords.z-bias)), 0, 1);
		//	}
		//}
		//total /= totalTexels;
	
		//lightFactor = 1.0 - (total * shadowCoords.w);
		
		lightFactor = max(texture(shadowMap, vec3(shadowCoords.xy, shadowCoords.z-bias)), 0.1);
		
		//for (int i=0;i<4;i++){
  		//	if ( texture( shadowMap, vec3(shadowCoords.xy + poissonDisk[i]/700.0, shadowCoords.z-bias) ) < 1){
    	//		lightFactor-=0.25;
  		//	}
		//}
	}
	
	//if(useLightingCalc > 0.5){
	//	vec3 unitNormal = normalize(surfaceNormal);
	//	vec3 unitVectorToCamera = normalize(toCameraVector);
	//	
	//	vec3 totalDiffuse = vec3(0.0);
	//	vec3 totalSpecular = vec3(0.0);
	//	
	//	for(int i = 0; i < LIGHTS ; i++){
	//		float distance = length(toLightVector[i]);
	//		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
	//		vec3 unitLightVector = normalize(toLightVector[i]);
	//		float nDotl = dot(unitNormal,unitLightVector);
	//		float brightness = max(nDotl,0.0);
	//		vec3 lightDirection = -unitLightVector;
	//		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	//		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	//		specularFactor = max(specularFactor,0.0);
	//		float dampedFactor = pow(specularFactor,shineDamper);
	//		totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
	//		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
	//	}
	//	
	//	totalDiffuse = max(totalDiffuse * lightFactor, 0.15);
	//	
	//	out_Color =  vec4(totalDiffuse,1.0) * textureColor + vec4(totalSpecular,1.0);
	//}else{
		//out_Color = vec4(textureColor.r+LV/10.0, textureColor.g+LV/10.0, textureColor.b+LV/10.0, textureColor.a);
		vec3 unitNormal = normalize(surfaceNormal);
		vec3 unitVectorToCamera = normalize(toCameraVector);
		
		vec3 totalDiffuse = vec3(0.0);
		vec3 totalSpecular = vec3(0.0);
		
		float distance = length(toLightVector[0]);
		float attFactor = attenuation[0].x + (attenuation[0].y * distance) + (attenuation[0].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[0]);
		float nDotl = abs(dot(unitNormal,unitLightVector));
		float brightness = max(nDotl,0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[0])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[0])/attFactor;
		
		totalDiffuse = max(totalDiffuse * lightFactor, 0.15);
		
		out_Color = clamp(((vec4(totalDiffuse,1.0) + vec4(totalSpecular,1.0))*LV.w + vec4(LV.xyz, 1.0)), max(LV.w*0.25, 0.1), 1)*textureColor;
		//out_Color = vec4(LV, 1.0);
	//}
	out_BrightColor = vec4(0.0);
	//if(usesSpecularMap > 0.5){
	//	vec4 mapInfo = texture(specularMap, pass_textureCoordinates);
	//	totalSpecular *= mapInfo.r;
	//	if(mapInfo.g > 0.5){
	//		out_BrightColor = textureColor + vec4(totalSpecular, 1.0);
	//		totalDiffuse = vec3(1.0);
	//	}
	//}
	
	
	if(MODE == 0){
		out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
	}else{
		out_Color = mix(out_Color, vec4(0.7, 0.7, 0.7, 1.0-verz), verz);
	}
	
}