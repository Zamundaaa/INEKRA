#version 400 core

const int LIGHTS = 1;

in vec3 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[LIGHTS];
in vec3 toCameraVector;
in vec4 shadowCoords;
in float visibility;

in float verz;
in vec4 LV;//!!!!!!!!
//in float nearEnough;

layout (location = 0) out vec4 out_Color;
layout (location = 1) out vec4 out_BrightColor;

uniform vec3 lightColour[LIGHTS];
uniform vec3 attenuation[LIGHTS];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform float highlight;
uniform sampler2DArray TEX;

uniform int MODE;

const float MIN_LIGHT = 0.01;

void main(void){

	vec4 textureColor = texture(TEX , pass_textureCoordinates);
	
	if(textureColor.a < 0.1){
		discard;
	}
	
	vec3 unitNormal = surfaceNormal;//normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector[0]);
	float brightness = max(dot(unitNormal,unitLightVector), 0.0);
	vec3 diffuse = brightness * lightColour[0];
	out_Color = clamp((vec4(diffuse ,1.0)*LV.w + vec4(LV.xyz, 1.0)), max((LV.w-1)*0.25, MIN_LIGHT), 1)*textureColor;
	
	out_BrightColor = vec4(0.0);
	
	if(MODE == 0){
		out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
	}else{
		out_Color = mix(out_Color, vec4(0.7, 0.7, 0.7, 1.0-verz), verz);
	}
	
}