#version 330

in vec2 texCoords;

out vec4 out_Color;

uniform int seed;

// 2D Random
float random (in vec2 st) { 
    return fract(sin(dot(st.xy,
                         vec2(12.9898+seed*603.713,78.233+seed*12.953)))//+seed
                 * 43758.5453123);
}

// 2D Noise based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise (in vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    // Smooth Interpolation

    // Cubic Hermine Curve.  Same as SmoothStep()
    vec2 u = f*f*(3.0-2.0*f);
    // u = smoothstep(0.,1.,f);

    // Mix 4 coorners porcentages
    return mix(a, b, u.x) + 
            (c - a)* u.y * (1.0 - u.x) + 
            (d - b) * u.x * u.y;
}

const float ts = 10;

uniform float color;
uniform float alpha;

void main(void){
	
	float a = alpha*noise(texCoords*ts);
	float dist = length(texCoords);
	if(dist > 0.9){
		if(noise((texCoords+5)*5) > 0.5){
			a *= max(1-dist, 0);
		}else{
			a *= max(1.5-dist, 0);
		}
	}
	
	out_Color = vec4(color, color, color, a);
		
}
