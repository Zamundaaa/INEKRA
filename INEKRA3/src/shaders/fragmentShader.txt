#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in vec4 shadowCoords;
in float visibility;

layout (location = 0) out vec4 out_Color;
layout (location = 1) out vec4 out_BrightColor;

uniform sampler2D modelTexture;
uniform sampler2D specularMap;
uniform sampler2D shadowMap;
uniform float usesSpecularMap;
uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform float highlight;

uniform float useShadows;

const int pcfCount = 1;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);

void main(void){
	
	float lightFactor = 1.0;
	if(useShadows > 0.5){
		//float mapSize = 4096.0;
		float mapSize = textureSize(shadowMap, 0).x;
		float texelSize = 1.0 / mapSize;
		float total = 0.0;
		
		for(int x = -pcfCount; x <= pcfCount; x++){
			for(int y = -pcfCount; y <= pcfCount; y++){
				float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;
				if(shadowCoords.z > objectNearestLight + 0.002){
					total += 1.0;
				}
			}
		}
		total = total /  totalTexels;
	
		lightFactor = 1.0 - (total * shadowCoords.w);
	}
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < 4 ; i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
	}
	
	totalDiffuse = max(totalDiffuse * lightFactor, 0.25);
	
	vec4 textureColor = texture(modelTexture,pass_textureCoordinates);
	
	if(textureColor.a < 0.1){
		discard;
	}
	
	out_BrightColor = vec4(0.0);
	if(usesSpecularMap > 0.5){
		vec4 mapInfo = texture(specularMap, pass_textureCoordinates);
		totalSpecular *= mapInfo.r;
		if(mapInfo.g > 0.5){
			out_BrightColor = textureColor + vec4(totalSpecular, 1.0);
			totalDiffuse = vec3(1.0);
		}
	}
	
	out_Color = vec4(totalDiffuse,1.0) * textureColor + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
	out_Color = vec4(out_Color.r + highlight, out_Color.g + highlight, out_Color.b + highlight, out_Color.a);
	
}