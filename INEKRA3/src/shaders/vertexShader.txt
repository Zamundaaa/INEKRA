#version 400 core

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;
out vec4 shadowCoords;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

uniform float useFakeLightning;

uniform float numberOfRows;
uniform vec2 offSet;

uniform vec4 plane;

uniform float density;
uniform float gradient;

//const float density = 0.003;
//const float gradient = 5.0;
const float shadowDistance = 150.0;
const float transitionDistance = 10.0;

uniform mat4 toShadowMapSpace;

uniform float useShadows;

void main(void){
	
	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	vec4 posRelatToCam = viewMatrix * worldPosition;
	
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	
	pass_textureCoordinates = (textureCoordinates/numberOfRows) + offSet;
	
	vec3 actualNormal = normal;
	if(useFakeLightning > 0.5){
		actualNormal = vec3(0.0, 1.0, 0.0);
	}
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
	for(int i = 0; i < 4;i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	float distance = length(posRelatToCam.xyz);
	visibility = exp(-pow((distance * density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
	if(useShadows > 0.5){
		shadowCoords = toShadowMapSpace * worldPosition;
		
		distance = distance - (shadowDistance - transitionDistance);
		distance = distance / transitionDistance;
		shadowCoords.w = clamp(1.0-distance, 0.0, 1.0);
	}
	
}